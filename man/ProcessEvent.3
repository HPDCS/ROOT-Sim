.\" The ROme OpTimistic Simulator (ROOT-Sim) Manual
.\" written by the High Performance and Dependable Computing Systems
.\" Sapienza, University of Rome
.\" http://www.dis.uniroma1.it/~hpdcs
.\"
.\" Nov 15 2018, Alessandro Pellegrini
.\" 	Revised manpages
.\" May 09 2011, Alessandro Pellegrini
.\" 	First version of the manpages

.TH ProcessEvent 3 2018-11-15 "The ROme OpTimistic Simulator"

.SH NAME
ProcessEvent - Schedules the execution of a simulation event at a certain logical process.

.SH SYNOPSIS
.B #include <ROOT-Sim.h>


.B void ProcessEvent(unsigned int \fIme\fP, simtime_t \fInow\fP, int \fIevent_type\fP, void *\fIcontent\fP, unsigned int \fIsize\fP, void *\fIstate\fP);

.SH DESCRIPTION

ProcessEvent is the main application-level callback. A simulation model must implement this function
to specify the logic associated with the event handlers associated with the model, so as to
actually process simulation events.

The arguments passed to this callback are:

.IP * 2
\fIme\fP: the global id associated to the LP which is being scheduled for event execution.
.IP * 2
\fInow\fP: the current value of the local clock.
.IP * 2
\fIevent_type\fP: the numerical code for the event to be processed.
.IP * 2
\fIcontent\fP: the buffer mantaining the event payload.
.IP * 2
\fIsize\fP: the size (in bytes) of the event payload.
.IP * 2
\fIstate\fP: the pointer to the top data structure forming the simulation state layout.

.PP
ProcessEvent is the sole entry point at application level which is used to schedule the actual
events to be simulated. Therefore, it must act as a demultiplexer of event handlers, depending
on the \fIevent_type\fP code which is passed by the runtime environment. Typically, this is
implemented using a \fIswitch-case\fP construct.

The values associated with \fIevent_type\fP are model-specific, and should be decided by the
developer (typically, in the form of a set of defines or using an enum).

Upon initialization, ROOT-Sim schedules to all the Logical Processes the \fBINIT\fP event (the
numerical code of which is 0). This means that the implementation of ProcessEvent should 
explicitly handle this event, and that code 0 cannot be used by the application-level
code as a user-defined event. \fBINIT\fP is defined into \fIROOT-Sim.h\fP.
The purpose of this event is to allow logical processes to perform initialization operations
(such as allocating memory for their initial simulation states).
\fBINIT\fP's payload \fIcontent\fP is NULL by definition.

Other events bring a payload which could be NULL or any buffer, and \fIsize\fP states what is
the size of the current payload, allowing the programmer to use different payloads associated with
different events, if needed.

An LP is not dispatched again after the execution of \fBINIT\fP, unless an event is scheduled
to it during the simulation run.

.SH ERRORS

This function returns no errors.

.SH EXAMPLES

In the following minimal example, one single event is specified, and a state structure
containing an event counter is defined. Each Logical Process in the simulation
model schedules an event to a random process according to a Uniform distribution,
and the times associated with the events are determined according to the same
distribution.

.in +4n
.nf
#define EVENT 1

typedef struct _state_type {
	int events_executed;
} state_type;

void ProcessEvent(unsigned int me, simtime_t now, int event_type, void ∗content, unsigned int size, void ∗state) {

	time_type timestamp = (time_type)(now + 10 ∗ Random());
	int receiver = (int)(n_prc_tot * Random());

	switch(event_type) {
		case INIT:
			state = (state_type∗)malloc(sizeof(state_type));
			SetState(state);
			state−>events_executed = 0;
			ScheduleNewEvent(me, timestamp, EVENT, NULL, 0);
		break;

		case EVENT:
			ScheduleNewEvent(me, timestamp, EVENT, NULL, 0);
		break;
	}
}

.fi
.in

Note the usage of \fIRandom()\fP, \fIn_prc_tot\fP, \fISetState\fP and \fIScheduleNewEvent\fP.
See the \fIROOT-Sim.h\fP, \fISetState\fP and \fIScheduleNewEvent\fP manpages for further
details on them.

.SH SEE ALSO
.BR ROOT-Sim (7),
.BR OnGVT (3),
.BR ScheduleNewEvent (3),
.BR SetState (3),
.BR rootsim (3),
.BR ROOT-Sim.h (3)

.SH COPYRIGHT
ROOT-Sim is developed by the
.I High Performance and Dependable Computing Systems
(HPDCS) Group at
.I Sapienza, University of Rome,
all the copyrights belong to the Group, and the software is released under GPL-3 License.


For further details, see the page http://www.dis.uniroma1.it/~hpdcs/ROOT-Sim/
