{"name":"ROOT-Sim","tagline":"The ROme OpTimistic Simulator: Multithreaded Parallel Discrete Event Simulator","body":"# The ROme OpTimistic Simulator (ROOT-Sim)\r\n\r\n*Brought to you by the High Performance and Dependable Computing Systems (HPDCS)\r\nat Sapienza, University of Rome*\r\n\r\n----------------------------------------------------------------------------------------\r\n\r\nThe ROme OpTimistic Simulator is an x86-64 Open Source, multithreaded parallel simulation platform\r\ndeveloped using C/POSIX technology. It transparently supports all the mechanisms associated\r\nwith parallelization (e.g., mapping of simulation objects on different kernel instances) and\r\noptimistic synchronization (e.g., state recoverability).\r\n\r\nThe programming model supported by ROOT-Sim allows the simulation model developer \r\nto use a simple application-callback function named ProcessEvent() as the event handler,\r\nwhose parameters determine which simulation object is currently taking control for\r\nprocessing its next event, and where the state of this object is located in memory. \r\nAn object is a data structure, whose state can be scattered on dynamically allocated\r\nmemory chunks, hence the memory address passed to the callback locates a top level\r\ndata structure implementing the object state-layout.\r\n\r\nROOT-Sim's development started as a research project late back in 1987, and is currently\r\nrun by the High Performance and Dependable Computing Systems group at the \r\nDipartimento di Ingegneria Informatica, Automatica e Gestionale, Sapienza, University of Rome.\r\n\r\n## About this Version\r\n\r\nThis version of ROOT-Sim stands as the latest development branch of the simulator.\r\nCurrently, it supports a high-performance multithreaded execution on multicore environments.\r\nThe goal of this ultimate version of the simulator is to port all the lessons learned during\r\nalmost 30 years of research on more modern multicore architectures. While the current\r\nversion still does not allow to run on distributed environments, it will in the near\r\nfuture, after that many low-level optimizations are completed.\r\n\r\nThis new version strives to be as backwards compatible as possible, letting all the\r\nhistoric simulation models developed on ROOT-Sim be compatible, although some\r\nrecent changes in the simulator's architecture require minor modifications to\r\nthe original models' sources (which are nevertheless being updated in the current branch).\r\n\r\n## Installation Notes\r\n\r\nROOT-Sim uses autotools to provide an installation workflow which is\r\ncommon for all supported platforms. This repository does not provide\r\nalready-generated installation scripts (while released tarballs do),\r\nrather we provide the convenience `autogen.sh` script which should\r\nbuild everything on the target machine. Using autotools, `autoconf`,\r\n`automake` and `libtoolize` are required to let `autogen.sh` generate\r\nthe correct `configure` script.\r\n\r\nBriefly, the shell commands `./configure; make; make install` should\r\nconfigure, build, and install this package.\r\nAlso, you can also type `make uninstall` to remove the installed files.\r\n\r\nBy default, `make install` installs the package's commands under\r\n`/usr/local/bin`, include files under `/usr/local/include`, etc.  You\r\ncan specify an installation prefix other than `/usr/local` by giving\r\n`configure` the option `--prefix=PREFIX`, where `PREFIX` must be an\r\nabsolute path name.\r\n\r\nROOT-Sim uses many `gcc` extensions, so the currently supported\r\ncompiler is only `gcc`.\r\n\r\n\r\n### Optional Features\r\n\r\nWhen running the simulation model, ROOT-Sim allocates a separate\r\nstack for each Logical Process, so as to completely separate\r\ntheir execution contexts, using custom User-Level Threads.\r\nThis could require longer simulation startup\r\ntime, which could be avoided during model development by passing\r\n`configure` the option `--disable-ult`\r\n\r\nWhen debugging the platform, it is suggested to pass \r\n`configure` the option `--enable-debug` to compile the simulator\r\nwith more strict error checking, and to include all debugging symbols.\r\n\r\n\r\n## Usage\r\n\r\nWhen running `make install`, the `rootsim-cc` compiler is added to the path.\r\n\r\nTo compile a simulaton model, simply `cd` into the project's directory\r\nand type `rootsim-cc *.c -o model`. This will create the `model`\r\nexecutable, which is the model code already linked with the ROOT-sim library.\r\n`rootsim-cc` ultimately relies on `gcc`, so any flag supported by\r\n`gcc` can be passed to `rootsim-cc`.\r\n\r\nTo test the correctness of the model, it can be run sequentially, typing\r\n`./model --sequential --nprc <number of required LPs>`\r\nThis allows to spot errors in the implementation more easily.\r\n\r\nThen, to run it in parallel, type\r\n`./model --np <number of available Cores> --nprc <number of required LPs>`\r\n","google":"UA-26544119-1","note":"Don't delete this file! It's used internally to help with page regeneration."}